{"version":3,"sources":["components/Weather.js","components/Form.js","components/Title.js","components/App.js","serviceWorker.js","index.js"],"names":["Weather","className","this","props","country","city","temperature","humidity","description","error","React","Component","Form","onSubmit","loadWeather","type","name","placeholder","Title","Api_Key","App","state","undefined","getWeather","e","a","async","target","elements","value","preventDefault","fetch","api_call","json","response","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OA6CeA,E,iLAtCX,OACI,yBAAKC,UAAU,WAGHC,KAAKC,MAAMC,SAAWF,KAAKC,MAAME,MAAQ,oDACrC,kCAASH,KAAKC,MAAME,KAApB,KAA4BH,KAAKC,MAAMC,QAAvC,gBAKJF,KAAKC,MAAMG,aAAe,0CACtB,kCAAQJ,KAAKC,MAAMG,YAAY,IAA/B,OAKJJ,KAAKC,MAAMI,UAAY,uCACnB,kCAAQL,KAAKC,MAAMI,SAAnB,MAKJL,KAAKC,MAAMK,aAAe,yCACtB,kCAAQN,KAAKC,MAAMK,cAKvBN,KAAKC,MAAMM,OAAS,2BAAIP,KAAKC,MAAMM,Y,GAhCjCC,IAAMC,WCcbC,E,iLAXP,OACQ,0BAAMC,SAAYX,KAAKC,MAAMW,aACzB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,oD,GARDP,IAAMC,WCcVO,E,iLAVX,OACI,yBAAKjB,UAAU,OACb,4CACA,mF,GAPUS,IAAMC,WCKpBQ,EAAU,mCA6EDC,E,2MAzEbC,MAAQ,CAENf,iBAAagB,EACbjB,UAAMiB,EACNlB,aAASkB,EACTf,cAAUe,EACVd,iBAAac,EACbb,WAAOa,G,EAGTC,WAAa,SAAOC,GAAP,qBAAAC,EAAAC,OAAA,uDAELrB,EAAOmB,EAAEG,OAAOC,SAASvB,KAAKwB,MAC9BzB,EAAUoB,EAAEG,OAAOC,SAASxB,QAAQyB,MAC1CL,EAAEM,iBAJS,WAAAL,EAAA,MAKYM,MAAM,oDAAD,OAAqD1B,EAArD,YAA6DD,EAA7D,kBAA8Ee,KAL/F,cAKLa,EALK,kBAAAP,EAAA,MAMYO,EAASC,QANrB,OAQX,GAFMC,EANK,OAOXC,QAAQC,IAAIF,GACT7B,GAAQD,EACT,IACE,EAAKiC,SAAS,CACd/B,YAAa4B,EAASI,KAAKC,KAC3BlC,KAAM6B,EAASlB,KACfZ,QAAS8B,EAASM,IAAIpC,QACtBG,SAAU2B,EAASI,KAAK/B,SACxBC,YAAa0B,EAASO,QAAQ,GAAGjC,YACjCC,MAAO,KAGX,SACE,EAAK4B,SAAS,CACZ/B,YAAa,GACbD,KAAM,GACND,QAAS,GACTG,SAAU,GACVC,YAAa,GACbC,MAAO,2EAIT,EAAK4B,SAAS,CACZ5B,MAAO,kCA/BA,uC,wEAsCX,OAGQ,yBAAKR,UAAU,sBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEA,6BACA,kBAAC,EAAD,CAAMa,YAAaZ,KAAKqB,aACtB,kBAAC,EAAD,CACEjB,YAAaJ,KAAKmB,MAAMf,YACxBD,KAAMH,KAAKmB,MAAMhB,KACjBD,QAASF,KAAKmB,MAAMjB,QACpBG,SAAUL,KAAKmB,MAAMd,SACrBC,YAAaN,KAAKmB,MAAMb,YACxBC,MAAOP,KAAKmB,MAAMZ,c,GAjEpBC,IAAMC,WCGJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c0fc94e0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Weather extends React.Component {\r\n\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"Weather\">\r\n          \r\n                {\r\n                    this.props.country && this.props.city && <p>Here is the weather in  \r\n                        <span > {this.props.city}, {this.props.country} right now:</span>                    \r\n                    </p> \r\n                }\r\n                \r\n                {\r\n                    this.props.temperature && <p>Temperature: \r\n                        <span> {this.props.temperature-273} C</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.humidity && <p>Humidity: \r\n                        <span> {this.props.humidity}%</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.description && <p>Conditions:  \r\n                        <span> {this.props.description}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.error && <p>{this.props.error}</p>\r\n                }\r\n        \r\n            </div>\r\n        \r\n      );\r\n}\r\n  \r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\n\r\nclass Form extends React.Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n                <form onSubmit = {this.props.loadWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                    <button>Get Weather</button>\r\n                </form>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nclass Title extends React.Component {\r\n\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"App\">\r\n          <h1>Weather Now!</h1>\r\n          <p>Look up local weather in any city in the world.</p>\r\n        </div>\r\n      );\r\n}\r\n  \r\n}\r\n\r\nexport default Title;","import React from \"react\";\nimport Weather from \"./Weather\";\nimport Form from \"./Form\";\n// import SWeather from \"./components/stateless_weather\";\n// import SForm from \"./components/stateless_form\"\nimport Title from \"./Title\";\n\nconst Api_Key = \"8d2de98e089f1c28e1a22fc19a24ef04\";\n\nclass App extends React.Component {\n\n  state = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();   \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n    const response = await api_call.json();\n    console.log(response);\n    if(city && country){\n      try{\n        this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    }\n    catch{\n      this.setState({\n        temperature: \"\",\n        city: \"\",\n        country: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"There is an error with your search. Please input search values...\"\n      })\n    }\n    }else{\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  render() {\n\n    return (\n\n\n            <div className=\"container clearfix\">\n              <div className=\"row\">\n                <Title />\n                </div>\n                <div>\n                <Form loadWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                \n              </div>\n            </div>\n\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}